<?php

/**
 * @file
 * Module file for tracelytics module
 */

/**
 * Implements hook_menu().
 */
function tracelytics_menu() {
  $items['admin/config/system/tracelytics'] = array(
    'title' => 'Tracelytics',
    'description' => 'Configure the settings used for tracelytics (oboe).',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tracelytics_admin_settings'),
    'access arguments' => array('administer tracelytics'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_perm().
 */
function tracelytics_permission() {
  return array(
    'administer tracelytics' => array(
      'title' => t('Administer tracelytics'),
      'description' => t('Configure settings for the tracelytics module.'),
    )
  );
}

/**
 * Implements hook_admin_settings().
 *
 * Provide administrative options to enable/disable tracelytics functionality.
 */
function tracelytics_admin_settings() {
  if (!(function_exists('oboe_log'))) {
    drupal_set_message(t('Required Oboe PHP extension is not installed.'), 'error');
  }
  $form = array();
  $form['tracelytics_partition_traffic'] = array(
    '#type' => 'checkbox',
    '#title' => t('Partition traffic'),
    '#description' => t('Enable partitioning of traffic into drush, cron, anonymous and authenticated.'),
    '#default_value' => variable_get('tracelytics_partition_traffic', FALSE),
    '#disabled' => !(function_exists('oboe_log')),
  );
  $form['tracelytics_track_menu'] = array(
    '#type' => 'checkbox',
    '#title' => t('Track active menu items'),
    '#description' => t('Enable tracking of the active menu item and first argument as Controller/Action.'),
    '#default_value' => variable_get('tracelytics_track_menu', FALSE),
    '#disabled' => !(function_exists('oboe_log')),
  );
  $form['tracelytics_log_errors'] = array(
      '#type' => 'checkbox',
      '#title' => t('Track watchdog'),
      '#description' => t('Enable tracking of watchdog entries of WATCHDOG_WARNING or greater severity as errors.'),
      '#default_value' => variable_get('tracelytics_log_errors', FALSE),
      '#disabled' => !(function_exists('oboe_log')),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_watchdog().
 *
 * Record errors to tracelytics.
 */
function tracelytics_watchdog($log_entry) {
  if (variable_get('tracelytics_log_errors', FALSE)
      && $log_entry['severity'] <= WATCHDOG_WARNING
      && $log_entry['type'] != 'php') {
    oboe_log('info', array('ErrorClass' => $log_entry['type'], 'ErrorMsg' => $log_entry['message']));
  }
}

/**
 * Implements hook_exit().
 *
 * Utilize oboe_log for traffic partitioning.
 */
function tracelytics_exit() {
  global $user;

  // Partition traffic
  if (variable_get('tracelytics_partition_traffic', FALSE)) {
    switch ($user->uid) {
      case 1:
        oboe_log('info', array('Partition' => 'Admin'));
        break;
      case 0:
        oboe_log('info', array('Partition' => 'Anonymous'));
        break;
      default:
        oboe_log('info', array('Partition' => 'Authenticated'));
        break;
    }
  }

  // Track active menu item
  if (variable_get('tracelytics_track_menu', FALSE) && $router_item = menu_get_item()) {
    oboe_log('info',
      array(
        'Controller' => $router_item['page_callback'],
        'Action' => (isset($router_item['page_arguments'][0]) ? tracelytics_get_action($router_item['page_arguments'][0]) : 'NULL'),
      )
    );
  }
}

/**
 * Implements hook_cron().
 *
 * Utilize oboe_log for traffic partitioning.
 */
function tracelytics_cron() {
  // Partition traffic
  if (variable_get('tracelytics_partition_traffic', FALSE)) {
    oboe_log('info', array('Partition' => 'Cron'));
  }

  // Track active menu item
  if (variable_get('tracelytics_track_menu', FALSE)) {
    oboe_log('info',
      array(
        'Controller' => 'cron',
        'Action' => NULL,
      )
    );
  }
}

/**
 * Get an action string from an unknown argument type.
 *
 * @param unknown_type $argument
 */
function tracelytics_get_action($argument) {
  switch (gettype($argument)) {
    case 'integer':
    case 'double':
    case 'boolean':
    case 'string':
      $action = (string) $argument;
      break;

    case 'array':
      $action = 'array';
      break;

    case 'object':
      if (!empty($argument->nid)) {
        $action = (!empty($argument->type) ? $argument->type . '_' : '') . 'node';
      }
      elseif (!empty($argument->uid)) {
        $action = 'user';
      }
      else {
        $action = get_class($argument);
      }
      break;

    case 'resource':
      $action = get_resource_type($argument);
      break;

    default:
      $action = NULL;
      break;
  }
  return $action;
}

/**
 * Determines the filename of the currently executing script.
 */
function tracelytics_get_script() {
  $script_name = array_pop(explode('/', $_SERVER['SCRIPT_NAME']));
  return $script_name;
}

