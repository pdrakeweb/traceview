<?php

/**
 * @file
 * Module file for traceview module
 */

/**
 * Implements hook_init().
 *
 * Include traceview RUM javascripts if enabled.
 */
function traceview_init() {
  if (variable_get('traceview_rum', FALSE)) {
    drupal_add_js(oboe_get_rum_header(FALSE), 'inline', 'header', FALSE, FALSE, FALSE);
    drupal_add_js(oboe_get_rum_footer(FALSE), 'inline', 'footer', FALSE, FALSE, FALSE);
  }
}

/**
 * Implements hook_menu().
 */
function traceview_menu() {
  $items['admin/settings/traceview'] = array(
    'title' => 'TraceView',
    'description' => 'Configure the settings used for traceview (oboe).',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('traceview_admin_settings'),
    'access arguments' => array('administer traceview'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_perm().
 */
function traceview_perm() {
  return array('administer traceview');
}

/**
 * Implements hook_admin_settings().
 *
 * Provide administrative options to enable/disable traceview functionality.
 */
function traceview_admin_settings() {
  global $conf;

  if (!(extension_loaded('oboe'))) {
    drupal_set_message(t('Required Oboe PHP extension is not installed.'), 'error');
  }

  if (isset($conf['traceview_fail_silently']) && $conf['traceview_fail_silently'] === FALSE) {
    drupal_set_message(t('The traceview module is not configured to fail silently.  Removal of the php-oboe extension may cause fatal errors.'), 'warning');
  }

  if (!($traceview_layers_modules = module_exists('traceview_early') && module_exists('traceview_late'))) {
    drupal_set_message(t('traceview_early and traceview_late must be installed in order to track layers.'), 'warning');
  }

  if (variable_get('traceview_partition_drush_traffic', FALSE) || variable_get('traceview_track_drush_commands', FALSE)) {
    drupal_set_message(t('oboe.tracing must be configured to "always" for PHP CLI in order to trace drush commands.'), 'notice');
  }

  $form = array();
  $form['traceview_partition_traffic'] = array(
    '#type' => 'checkbox',
    '#title' => t('Partition traffic'),
    '#description' => t('Enable partitioning of traffic into drush, cron, anonymous and authenticated.'),
    '#default_value' => variable_get('traceview_partition_traffic', FALSE),
    '#disabled' => !(function_exists('oboe_log')),
  );
  $form['traceview_rum'] = array(
    '#type' => 'checkbox',
    '#title' => t('Track RUM'),
    '#description' => t('Enable tracking of Real User Monitoring data via javascript.'),
    '#default_value' => variable_get('traceview_rum', FALSE),
    '#disabled' => !(function_exists('oboe_get_rum_header')),
  );
  $form['traceview_track_menu'] = array(
    '#type' => 'checkbox',
    '#title' => t('Track active menu items'),
    '#description' => t('Enable tracking of the active menu item and first argument as Controller/Action.'),
    '#default_value' => variable_get('traceview_track_menu', FALSE),
    '#disabled' => !(function_exists('oboe_log') && function_exists('menu_get_item')),
  );
  $form['traceview_log_errors'] = array(
    '#type' => 'checkbox',
    '#title' => t('Track watchdog'),
    '#description' => t('Enable tracking of watchdog entries of WATCHDOG_WARNING or greater severity as errors.'),
    '#default_value' => variable_get('traceview_log_errors', FALSE),
    '#disabled' => !(function_exists('oboe_log')),
  );
  $form['traceview_layers'] = array(
    '#type' => 'checkbox',
    '#title' => t('Track layers'),
    '#description' => t('Enable tracking of Drupal layers via hooks.'),
    '#default_value' => variable_get('traceview_layers', FALSE),
    '#disabled' => !$traceview_layers_modules,
  );
  $form['traceview_drush'] = array(
    '#type' => 'fieldset',
    '#title' => 'Drush integration',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['traceview_drush']['traceview_partition_drush_traffic'] = array(
    '#type' => 'checkbox',
    '#title' => t('Partition traffic'),
    '#description' => t('Enable partitioning of traffic into drush, cron, anonymous and authenticated.'),
    '#default_value' => variable_get('traceview_partition_drush_traffic', FALSE),
  );
  $form['traceview_drush']['traceview_track_drush_commands'] = array(
    '#type' => 'checkbox',
    '#title' => t('Track active menu items'),
    '#description' => t('Enable tracking of the active menu item and first argument as Controller/Action.'),
    '#default_value' => variable_get('traceview_track_drush_commands', FALSE),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_watchdog().
 *
 * Record errors to traceview.
 */
function traceview_watchdog($log_entry) {
  if (variable_get('traceview_log_errors', FALSE)
      && $log_entry['severity'] <= WATCHDOG_WARNING
      && $log_entry['type'] != 'php') {
    $message = filter_xss(is_null($log_entry['variables']) ? $log_entry['message'] : strtr($log_entry['message'], $log_entry['variables']));
    traceview_oboe_log('info', array('ErrorClass' => $log_entry['type'], 'ErrorMsg' => $message));
  }
}

/**
 * Implements hook_exit().
 *
 * Record traceview traffic partitioning and controller.
 */
function traceview_exit() {
  global $user, $_traceview_partition;

  // Partition traffic.
  if (variable_get('traceview_partition_traffic', FALSE)) {
    if (!empty($_traceview_partition)) {
      traceview_oboe_log('info', array('Partition' => $_traceview_partition));
    }
    else {
      switch ($user->uid) {
        case 1:
          traceview_oboe_log('info', array('Partition' => 'Admin'));
          break;

        case 0:
          traceview_oboe_log('info', array('Partition' => 'Anonymous'));
          break;

        default:
          traceview_oboe_log('info', array('Partition' => 'Authenticated'));
          break;
      }
    }
  }

  // Track active menu item.
  if (function_exists('menu_get_item')
      && variable_get('traceview_track_menu', FALSE)
      && $router_item = menu_get_item()) {
    traceview_set_controller(
      array(
        'Controller' => $router_item['page_callback'],
        'Action' => (isset($router_item['page_arguments'][0]) ? traceview_get_action($router_item['page_arguments'][0]) : 'NULL'),
      )
    );
  }

  $controller = traceview_set_controller(NULL, FALSE, TRUE);
  if (!empty($controller)) {
    traceview_oboe_log('info', $controller);
  }
}

/**
 * Set the controller to be reported to traceview.
 *
 * @param array $controller
 *   The controller array to be reported to traceview.
 * @param bool $override
 *   Flag to indicate whether the passed controller should override previously
 *   set controller array.
 * @param bool $alter
 *   Flag to indicate whether to call hook_alter on the controller array.
 *
 * @return array
 *   The controller array to be reported to traceview.
 */
function traceview_set_controller($controller = NULL, $override = FALSE, $alter = FALSE) {
  static $traceview_controller = array();
  if (!empty($controller) && ($override || empty($traceview_controller))) {
    $traceview_controller = $controller;
  }
  if (function_exists('drupal_alter') && $alter) {
    drupal_alter('traceview_controller', $traceview_controller);
  }
  return $traceview_controller;
}

/**
 * Implements hook_cron().
 *
 * Record traceview traffic partitioning and controller within cron.
 */
function traceview_cron() {
  // Partition cron traffic.
  if (variable_get('traceview_partition_traffic', FALSE)) {
    traceview_oboe_log('info', array('Partition' => 'Cron'));
  }

  // Track active menu item.
  if (variable_get('traceview_track_menu', FALSE)) {
    traceview_oboe_log('info',
      array(
        'Controller' => 'cron',
        'Action' => NULL,
      )
    );
  }
}

/**
 * Get an action string from an unknown argument type.
 *
 * @param mixed $argument
 *   Argument variable as passed to menu callback.
 *
 * @return string
 *   Description (or string conversion) of $argument.
 */
function traceview_get_action($argument) {
  switch (gettype($argument)) {
    case 'integer':
    case 'double':
    case 'boolean':
    case 'string':
      $action = (string) $argument;
      break;

    case 'array':
      $action = 'array';
      break;

    case 'object':
      if (!empty($argument->nid)) {
        $action = (!empty($argument->type) ? $argument->type . '_' : '') . 'node';
      }
      elseif (!empty($argument->uid)) {
        $action = 'user';
      }
      else {
        $action = get_class($argument);
      }
      break;

    case 'resource':
      $action = get_resource_type($argument);
      break;

    default:
      $action = NULL;
      break;
  }
  return $action;
}

/**
 * Set the traceview partition.
 *
 * @param string $partition
 *   Traffic partition name.
 */
function traceview_set_partition($partition) {
  global $_traceview_partition;
  $_traceview_partition = $partition;
}

/**
 * Wrapper function for oboe_log to support different library versions, which
 * have different function signatures.
 *
 * @param string $param1
 * @param mixed $param2
 * @param mixed $param3
 * @param boolean $backtrace
 */
function traceview_oboe_log($param1, $param2, $param3 = NULL, $backtrace = NULL) {
  // By default, log a backtrace for all layer entry calles, unless explicitly
  // disabled by setting $backtrace to FALSE.
  if ($backtrace === NULL && $param2 == 'entry') {
    $backtrace = TRUE;
  }
  if (!$backtrace || version_compare(phpversion('oboe'), '1.1.2', '<')) {
    if ($param3 === NULL) {
      oboe_log($param1, $param2);
    }
    else {
      oboe_log($param1, $param2, $param3);
    }
  }
  else {
    if ($param3 === NULL) {
      oboe_log($param1, $param2, TRUE);
    }
    else {
      oboe_log($param1, $param2, $param3, TRUE);
    }
  }
}

/**
 * In order to support configurations where the php-oboe extension may or may
 * not be available during a given application execution, such as during the
 * execution of a drush command, on a singler server in a cluster or on a non-
 * production environment, the following code will optionally define the
 * missing functions as empty functions provided the traceview_fail_silently
 * configuration setting is not empty.
 */
global $conf;
if (!isset($conf['traceview_fail_silently']) || $conf['traceview_fail_silently'] !== FALSE) {
  if (!function_exists('oboe_log')) {
    // These functions intentionally left empty.
    function oboe_log() {}
    function oboe_get_rum_header() {}
    function oboe_get_rum_footer() {}
  }
}
