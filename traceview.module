<?php

/**
 * @file
 * Module file for traceview module
 */

use Drupal\Component\Utility\Xss;

include_once 'traceview.inc';

/**
 * Implements hook_js_alter().
 */
function traceview_js_alter(&$javascript) {
  $config = \Drupal::config('traceview.settings');
  if ($config->get('rum.track')) {
    $javascript['oboe_rum_header'] = array(
      'data' => oboe_get_rum_header(FALSE),
      'type' => 'inline',
      'scope' => 'header',
      'group' => JS_THEME,
      'every_page' => TRUE,
      'weight' => 1000,
      'cache' => FALSE,
      'preprocess' => FALSE
    );
    $javascript['oboe_rum_footer'] = array(
      'data' => oboe_get_rum_footer(FALSE),
      'type' => 'inline',
      'scope' => 'header',
      'group' => JS_THEME,
      'every_page' => TRUE,
      'weight' => 1000,
      'cache' => FALSE,
      'preprocess' => FALSE
    );
  }
}

/**
 * Implements hook_perm().
 */
function traceview_permission() {
  return array(
    'administer traceview' => array(
      'title' => t('Administer traceview'),
      'description' => t('Configure settings for the traceview module.'),
    ),
  );
}

/**
 * Implements hook_watchdog().
 *
 * Record errors to traceview.
 */
function traceview_watchdog($log_entry) {
  $config = \Drupal::config('traceview.settings');
  if (!$config->get('watchdog.track')
      && $log_entry['severity'] <= WATCHDOG_WARNING
      && $log_entry['type'] != 'php') {
    $message = Xss::filter(is_null($log_entry['variables']) ? $log_entry['message'] : strtr($log_entry['message'], $log_entry['variables']));
    switch($log_entry['type']) {
      case 'page not found':
        if (!$config->get('watchdog.404')) {
          return;
        }
        break;

      case 'access denied':
        if (!$config->get('watchdog.403')) {
          return;
        }
        break;
    }
    traceview_oboe_log(NULL, 'info', array('ErrorClass' => $log_entry['type'], 'ErrorMsg' => $message), TRUE);
  }
}

/**
 * Implements hook_cron().
 *
 * Record traceview traffic partitioning and controller within cron.
 */
function traceview_cron() {
  $config = \Drupal::config('traceview.settings');

  // Partition cron traffic.
  if ($config->get('partition.track', FALSE)) {
    traceview_set_partition('Cron');
  }

  // Track active menu item.
  if ($config->get('controller.track', FALSE)) {
    $controller = array(
      'Controller' => 'cron',
      'Action' => NULL,
    );
    traceview_set_controller($controller, TRUE);
  }

  // We call traceview_set_attributes here because cron.php doesn't respect
  // hook_exit().
  traceview_set_attributes();
}

/**
 * Implements hook_batch_alter().
 *
 * @param array $batch
 */
function traceview_batch_alter($batch) {
  $config = \Drupal::config('traceview.settings');
  $current_batch = $batch['sets'][0];
  if (isset($current_batch['file']) && $current_batch['file'] == 'includes/update.inc' && $config->get('api.annotations.modules', FALSE)) {
    $update_count = count($current_batch['operations']);
    traceview_add_annotation('Module updates run (' . $update_count . ' updates).');
  }
}

/**
 * Implements hook_modules_enabled().
 *
 * @param array $modules
 */
function traceview_modules_enabled($modules) {
  if (\Drupal::config('traceview.settings')->get('api.annotations.modules', FALSE)) {
    $enabled_count = count($modules);
    traceview_add_annotation($enabled_count . ' module(s) enabled (' . implode(', ', $modules) . ').');
  }
}

/**
 * Implements hook_modules_disabled().
 *
 * @param array $modules
 */
function traceview_modules_disabled($modules) {
  if (\Drupal::config('traceview.settings')->get('api.annotations.modules', FALSE)) {
    $enabled_count = count($modules);
    traceview_add_annotation($enabled_count . ' module(s) disabled (' . implode(', ', $modules) . ').');
  }
}

/**
 * Implements hook_token_info().
 *
 */
function traceview_token_info() {
  $type = array(
    'name' => t('TraceView'),
    'description' => t('Tokens related to TraceView.'),
    'needs-data' => 'node',
  );
  $trace = array(
    'tid' => array(
      'name' => t("Trace ID"),
      'description' => t("The unique ID of the trace."),
    )
  );
  return array(
    'types' => array('trace' => $type),
    'tokens' => array(
      'trace' => $trace,
    ),
  );
}

/**
 * Implements hook_tokens().
 */
function traceview_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $sanitize = !empty($options['sanitize']);
  $replacements = array();
  if ($type == 'trace') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'tid':
          $replacements[$original] = $sanitize? check_plain(oboe_get_context()) : oboe_get_context();
          break;
      }
    }
  }
  return $replacements;
}
