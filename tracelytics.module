<?php

/**
 * @file
 * Module file for tracelytics module
 */

/**
 * Implements hook_init().
 *
 * Include tracelytics RUM javascripts if enabled.
 */
function tracelytics_init() {
  if (variable_get('tracelytics_rum', FALSE)) {
    drupal_add_js(oboe_get_rum_header(FALSE),
      array(
        'type' => 'inline',
        'scope' => 'header',
        'group' => JS_THEME,
        'every_page' => TRUE,
        'weight' => 1000,
        'preprocess' => FALSE,
      )
    );
    drupal_add_js(oboe_get_rum_footer(FALSE),
      array(
        'type' => 'inline',
        'scope' => 'footer',
        'group' => JS_THEME,
        'every_page' => TRUE,
        'weight' => 1000,
        'preprocess' => FALSE,
      )
    );
  }
}

/**
 * Implements hook_menu().
 */
function tracelytics_menu() {
  $items['admin/config/system/tracelytics'] = array(
    'title' => 'Tracelytics',
    'description' => 'Configure the settings used for tracelytics (oboe).',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tracelytics_admin_settings'),
    'access arguments' => array('administer tracelytics'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_perm().
 */
function tracelytics_permission() {
  return array(
    'administer tracelytics' => array(
      'title' => t('Administer tracelytics'),
      'description' => t('Configure settings for the tracelytics module.'),
    ),
  );
}

/**
 * Implements hook_admin_settings().
 *
 * Provide administrative options to enable/disable tracelytics functionality.
 */
function tracelytics_admin_settings() {
  global $conf;

  if (!(function_exists('oboe_log'))) {
    drupal_set_message(t('Required Oboe PHP extension is not installed.'), 'error');
  }

  if (empty($conf['tracelytics_fail_silently'])) {
    drupal_set_message(t('The tracelytics module is not configured to fail silently.  Removal of the php-oboe extension may cause fatal errors.'), 'warning');
  }

  if (!($tracelytics_layers_modules = module_exists('tracelytics_early') && module_exists('tracelytics_late'))) {
    drupal_set_message(t('tracelytics_early and tracelytics_late must be installed in order to track layers.'), 'warning');
  }

  if (variable_get('tracelytics_partition_drush_traffic', FALSE) || variable_get('tracelytics_track_drush_commands', FALSE)) {
    drupal_set_message(t('oboe.tracing must be configured to "always" for PHP CLI in order to trace drush commands.'), 'notice');
  }

  $form = array();
  $form['tracelytics_partition_traffic'] = array(
    '#type' => 'checkbox',
    '#title' => t('Partition traffic'),
    '#description' => t('Enable partitioning of traffic into drush, cron, anonymous and authenticated.'),
    '#default_value' => variable_get('tracelytics_partition_traffic', FALSE),
    '#disabled' => !(function_exists('oboe_log')),
  );
  $form['tracelytics_rum'] = array(
    '#type' => 'checkbox',
    '#title' => t('Track RUM'),
    '#description' => t('Enable tracking of Real User Monitoring data via javascript.'),
    '#default_value' => variable_get('tracelytics_rum', FALSE),
    '#disabled' => !(function_exists('oboe_get_rum_header')),
  );
  $form['tracelytics_track_menu'] = array(
    '#type' => 'checkbox',
    '#title' => t('Track active menu items'),
    '#description' => t('Enable tracking of the active menu item and first argument as Controller/Action.'),
    '#default_value' => variable_get('tracelytics_track_menu', FALSE),
    '#disabled' => !(function_exists('oboe_log') && function_exists('menu_get_item')),
  );
  $form['tracelytics_log_errors'] = array(
    '#type' => 'checkbox',
    '#title' => t('Track watchdog'),
    '#description' => t('Enable tracking of watchdog entries of WATCHDOG_WARNING or greater severity as errors.'),
    '#default_value' => variable_get('tracelytics_log_errors', FALSE),
    '#disabled' => !(function_exists('oboe_log')),
  );
  $form['tracelytics_layers'] = array(
    '#type' => 'checkbox',
    '#title' => t('Track layers'),
    '#description' => t('Enable tracking of Drupal layers via hooks.'),
    '#default_value' => variable_get('tracelytics_layers', FALSE),
    '#disabled' => !$tracelytics_layers_modules,
  );
  $form['tracelytics_api'] = array(
    '#type' => 'fieldset',
    '#title' => 'TraceView API',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['tracelytics_api']['tracelytics_key'] = array(
    '#type' => 'textfield',
    '#title' => t('TraceView client key'),
    '#description' => t("To enable calls to the TraceView API, provide your client key (e.g., 'abcd1234-1234-1234-aaaa-123412341234'). It can be found on the 'Install Host Agent' tab of the 'Get Started' page."),
    '#default_value' => variable_get('tracelytics_key', ''),
  );
  $form['tracelytics_api']['annotations'] = array(
    '#type' => 'fieldset',
    '#title' => 'Annotations',
    '#description' => t('If a client key has been provided, the `tracelytics_add_annotation` function can be used to add annotations in TraceView directly from your Drupal site. This function requires a string argument to be associated with the annotation, but it will also accept a second array argument using the key-value pairs detailed in the !link.', array('!link' => l(t('TraceView API documentation'), 'http://support.tv.appneta.com/kb/how-to/recording-system-events-with-tlog#api'))),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['tracelytics_api']['annotations']['tracelytics_annotation_appname'] = array(
    '#type' => 'textfield',
    '#title' => t('Default application'),
    '#description' => t("Provide the application that annotations should be associated with (typically, the application you've placed this Drupal installation in). This can be overriden on each call to `tracelytics_add_annotation`. If not provided, annotations will not be limited by application."),
    '#default_value' => variable_get('tracelytics_annotation_appname', ''),
  );
  $form['tracelytics_api']['annotations']['tracelytics_annotation_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Default username'),
    '#description' => t("Provide the username that annotations should be associated with. This can be overriden on each call to `tracelytics_add_annotation`. If not provided, this will default to the site name, or 'Drupal' if no site name is set."),
    '#default_value' => variable_get('tracelytics_annotation_username', ''),
  );
  $form['tracelytics_api']['annotations']['tracelytics_annotate_updates'] = array(
    '#type' => 'checkbox',
    '#title' => t('Annotate module updates'),
    '#description' => t('Record an annotation when module updates are run.'),
    '#default_value' => variable_get('tracelytics_annotate_updates', FALSE),
  );
  $form['tracelytics_drush'] = array(
    '#type' => 'fieldset',
    '#title' => 'Drush integration',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['tracelytics_drush']['tracelytics_partition_drush_traffic'] = array(
    '#type' => 'checkbox',
    '#title' => t('Partition traffic'),
    '#description' => t('Enable partitioning of traffic into drush, cron, anonymous and authenticated.'),
    '#default_value' => variable_get('tracelytics_partition_drush_traffic', FALSE),
  );
  $form['tracelytics_drush']['tracelytics_track_drush_commands'] = array(
    '#type' => 'checkbox',
    '#title' => t('Track active menu items'),
    '#description' => t('Enable tracking of the active menu item and first argument as Controller/Action.'),
    '#default_value' => variable_get('tracelytics_track_drush_commands', FALSE),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_watchdog().
 *
 * Record errors to tracelytics.
 */
function tracelytics_watchdog($log_entry) {
  if (variable_get('tracelytics_log_errors', FALSE)
      && $log_entry['severity'] <= WATCHDOG_WARNING
      && $log_entry['type'] != 'php') {
    $message = filter_xss(is_null($log_entry['variables']) ? $log_entry['message'] : strtr($log_entry['message'], $log_entry['variables']));
    oboe_log('info', array('ErrorClass' => $log_entry['type'], 'ErrorMsg' => $message));
  }
}

/**
 * Implements hook_exit().
 *
 * Record tracelytics traffic partitioning and controller.
 */
function tracelytics_exit() {
  global $user, $_tracelytics_partition;

  // Partition traffic.
  if (variable_get('tracelytics_partition_traffic', FALSE)) {
    if (!empty($_tracelytics_partition)) {
      oboe_log('info', array('Partition' => $tracelytics_partition));
    }
    else {
      switch ($user->uid) {
        case 1:
          oboe_log('info', array('Partition' => 'Admin'));
          break;

        case 0:
          oboe_log('info', array('Partition' => 'Anonymous'));
          break;

        default:
          oboe_log('info', array('Partition' => 'Authenticated'));
          break;
      }
    }
  }

  // Track active menu item.
  if (function_exists('menu_get_item')
      && variable_get('tracelytics_track_menu', FALSE)
      && $router_item = menu_get_item()) {
    tracelytics_set_controller(
      array(
        'Controller' => $router_item['page_callback'],
        'Action' => (isset($router_item['page_arguments'][0]) ? tracelytics_get_action($router_item['page_arguments'][0]) : 'NULL'),
      )
    );
  }

  $controller = tracelytics_set_controller(NULL, FALSE, TRUE);
  if (!empty($controller)) {
    oboe_log('info', $controller);
  }
}

/**
 * Set the controller to be reported to tracelytics.
 *
 * @param array $controller
 *   The controller array to be reported to tracelytics.
 * @param bool $override
 *   Flag to indicate whether the passed controller should override previously
 *   set controller array.
 * @param bool $alter
 *   Flag to indicate whether to call hook_alter on the controller array.
 *
 * @return array
 *   The controller array to be reported to tracelytics.
 */
function tracelytics_set_controller($controller = NULL, $override = FALSE, $alter = FALSE) {
  static $tracelytics_controller = array();
  if (!empty($controller) && ($override || empty($tracelytics_controller))) {
    $tracelytics_controller = $controller;
  }
  if (function_exists('drupal_alter') && $alter) {
    drupal_alter('tracelytics_controller', $tracelytics_controller);
  }
  return $tracelytics_controller;
}

/**
 * Implements hook_cron().
 *
 * Record tracelytics traffic partitioning and controller within cron.
 */
function tracelytics_cron() {
  // Partition cron traffic.
  if (variable_get('tracelytics_partition_traffic', FALSE)) {
    oboe_log('info', array('Partition' => 'Cron'));
  }

  // Track active menu item.
  if (variable_get('tracelytics_track_menu', FALSE)) {
    oboe_log('info',
      array(
        'Controller' => 'cron',
        'Action' => NULL,
      )
    );
  }
}

/**
 * Implements hook_batch_alter().
 * 
 * @param array $batch
 */
function tracelytics_batch_alter($batch) {
  if ($batch['file'] == 'inc/update.inc' && variable_get('tracelytics_annotate_updates', FALSE)) {
    $update_count = count($batch['operations']);
    tracelytics_add_annotation('Module updates run (' . $update_count . ' updates).');
  }
}

/**
 * Get an action string from an unknown argument type.
 *
 * @param mixed $argument
 *   Argument variable as passed to menu callback.
 *
 * @return string
 *   Description (or string conversion) of $argument.
 */
function tracelytics_get_action($argument) {
  switch (gettype($argument)) {
    case 'integer':
    case 'double':
    case 'boolean':
    case 'string':
      $action = (string) $argument;
      break;

    case 'array':
      $action = 'array';
      break;

    case 'object':
      if (!empty($argument->nid)) {
        $action = (!empty($argument->type) ? $argument->type . '_' : '') . 'node';
      }
      elseif (!empty($argument->uid)) {
        $action = 'user';
      }
      else {
        $action = get_class($argument);
      }
      break;

    case 'resource':
      $action = get_resource_type($argument);
      break;

    default:
      $action = NULL;
      break;
  }
  return $action;
}

/**
 * Set the tracelytics partition.
 *
 * @param string $partition
 *   Traffic partition name.
 */
function tracelytics_set_partition($partition) {
  static $tracelytics_partition;
  if (!empty($partition)) {
    $tracelytics_partition = $partition;
  }
  return $tracelytics_partition;
}

/**
 * Add an annotation using the API described here: http://support.tv.appneta.com/kb/how-to/recording-system-events-with-tlog#api
 *
 * @param string $message
 *   Annotation message.
 *
 * @param array $params
 *   Additional annotation parameters.
 *   
 * @return boolean
 *   Indicates whether the API call was successful.
 */
function tracelytics_add_annotation($message, $params = array()) {
  $url = 'https://api.tv.appneta.com/api-v1/log_message';
  
  $default_params = array(
    'key' => variable_get('tracelytics_key', FALSE),
    'time' => REQUEST_TIME,
    'appname' => variable_get('tracelytics_annotation_appname', FALSE),
    'hostname' => gethostname(),
    'username' => variable_get('tracelytics_annotation_username', variable_get('site_name', 'Drupal')),
    'layer' => 'PHP',
  );

  $params = array_merge($default_params, $params);
  
  if (empty($params['key'])) {
    watchdog('tracelytics', "Failed to add TraceView annotation '%annotation': no TraceView client key has been set.", array('%annotation' => $message), WATCHDOG_ERROR);
    return FALSE;
  }

  $http_options = array(
    'headers' => array(
      'Content-Type' => 'application/x-www-form-urlencoded',
    ),
    'method' => 'POST',
    'data' => http_build_query($params),
  );
  $result = drupal_http_request($url, $http_options);

  if (!empty($result->error)) {
    watchdog('tracelytics', "Failed to add TraceView annotation '%annotation': error message '%error'.", array('%annotation' => $message, '%error' => $result->error), WATCHDOG_ERROR);
    return FALSE;
  }

  return TRUE;
}

/**
 * In order to support configurations where the php-oboe extension may or may
 * not be available during a given application execution, such as during the
 * execution of a drush command, on a singler server in a cluster or on a non-
 * production environment, the following code will optionally define the
 * missing functions as empty functions provided the tracelytics_fail_silently
 * configuration setting is not empty.
 */
global $conf;
if (!empty($conf['tracelytics_fail_silently'])) {
  if (!function_exists('oboe_log')) {
    // These functions intentionally left empty.
    function oboe_log() {}
    function oboe_get_rum_header() {}
    function oboe_get_rum_footer() {}
  }
}
